# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pry-theme/all/pry-theme.rbi
#
# pry-theme-1.3.1

module PryTheme
  def self.color_const(color); end
  def self.create(config = nil, &block); end
  def self.tput_colors; end
end
class PryTheme::Config
  def apply; end
  def initialize(options); end
end
class PryTheme::Config::Executor
  def paint_key_as_symbol; end
end
module PryTheme::ThemeList
  def activate_theme(name); end
  def activate_theme_intelligently; end
  def add_theme(theme); end
  def current_theme; end
  def each(&block); end
  def reload_theme(name, file); end
  def themes; end
  extend PryTheme::ThemeList
end
class PryTheme::WhenStartedHook
  def apply_config; end
  def call(_context, _options, pry_instance); end
  def display_warning(pry_instance); end
  def load_themes; end
  def recreate_user_themes_from_default_ones; end
  def theme_file; end
end
class PryTheme::HEX
  def initialize(value); end
  def inspect; end
  def to_rgb; end
  def to_s; end
  def to_term(color_model = nil); end
  def validate_value(value); end
end
class PryTheme::RGB
  def approximate(term, color_model); end
  def find_among_term_colors(term, color_model); end
  def initialize(value); end
  def inspect; end
  def nearest_term_16(byte); end
  def nearest_term_256(byte); end
  def nearest_term_8(byte); end
  def to_a; end
  def to_css; end
  def to_hex; end
  def to_s; end
  def to_term(color_model = nil); end
  def validate_array(ary); end
end
class PryTheme::TERM
  def color_model; end
  def initialize(value, color_model = nil); end
  def inspect; end
  def to_i; end
  def validate_attrs(value, color_model); end
end
module PryTheme::Formattable
  def bold; end
  def bold?; end
  def italic; end
  def italic?; end
  def underline; end
  def underline?; end
end
class PryTheme::Color
  def background(readable = nil); end
  def build_bg_sequence; end
  def build_effects_sequence; end
  def build_fg_sequence; end
  def build_layer(layer); end
  def cast_color(layer); end
  def color_model; end
  def colors(layer = nil); end
  def create_ansi_sequence(fg, bg, default_seq); end
  def escape(ansi); end
  def find_color(layer); end
  def foreground(readable = nil); end
  def initialize(color_model, options = nil); end
  def layer_color(layer); end
  def options; end
  def set_layers; end
  def sorted_colors; end
  def to_ansi(inversion = nil); end
end
class PryTheme::Color::Declaration
  def build_effects; end
  def build_from_arg; end
  def build_from_two_args; end
  def build_from_two_layers; end
  def decl_contains_rgb?; end
  def decl_has_bg_key?; end
  def initialize(color_decl, color_model); end
  def parse; end
  def self.t(decl, color_model); end
  def self.translate(decl, color_model); end
  def to_color; end
  def validate_effects(color_decl, color_model); end
end
class PryTheme::Theme
  def activate; end
  def active; end
  def active?; end
  def author(options = nil); end
  def color_model; end
  def define_theme(&block); end
  def definition; end
  def description(text = nil); end
  def disable; end
  def initialize(config = nil, &block); end
  def name; end
  def to_coderay; end
  def validate_config; end
end
module PryTheme::Theme::DynamicMethod
  def def_dynamic_methods(*dynamic_methods); end
end
module PryTheme::Theme::DefaultAttrs
  def method_missing(meth, *args, &block); end
  def set_default_attrs(attrs); end
  def set_nested_attrs; end
end
class PryTheme::Theme::Definition
  def class_(*args); end
  def class_variable(*args); end
  def comment(*args); end
  def constant(*args); end
  def error(*args); end
  def float(*args); end
  def global_variable(*args); end
  def initialize(color_model, &block); end
  def inline_delimiter(*args); end
  def instance_variable(*args); end
  def integer(*args); end
  def keyword(*args); end
  def method(*args); end
  def predefined_constant(*args); end
  def regexp(&block); end
  def shell(&block); end
  def string(&block); end
  def symbol(*args); end
  extend PryTheme::Theme::DynamicMethod
  include PryTheme::Theme::DefaultAttrs
end
class PryTheme::Theme::Definition::Compound
  def char(*args); end
  def content(*args); end
  def delimiter(*args); end
  def escape(*args); end
  def initialize(color_model, &block); end
  def self_(*args); end
  extend PryTheme::Theme::DynamicMethod
  include PryTheme::Theme::DefaultAttrs
end
class PryTheme::Theme::Definition::Regexp < PryTheme::Theme::Definition::Compound
  def initialize(color_model, &block); end
  def modifier(*args); end
end
class PryTheme::Theme::Definition::Shell < PryTheme::Theme::Definition::Compound
end
class PryTheme::Theme::Definition::String < PryTheme::Theme::Definition::Compound
end
class PryTheme::ThemeError < StandardError
end
class PryTheme::Preview
  def banner(msg); end
  def description; end
  def header; end
  def initialize(theme); end
  def long; end
  def long_snippet; end
  def short; end
  def short_snippet; end
end
class PryTheme::Color8 < PryTheme::Color
  def build_bg_sequence; end
  def build_effects_sequence; end
  def build_fg_sequence; end
  def create_ansi_sequence(fg, bg); end
  def find_from_integer(color_id); end
  def initialize(options = nil); end
end
class PryTheme::Color256 < PryTheme::Color
  def build_bg_sequence; end
  def build_fg_sequence; end
  def create_ansi_sequence(fg, bg); end
  def find_from_integer(color_id); end
  def initialize(options = nil); end
  include PryTheme::Formattable
end
class PryTheme::Color16 < PryTheme::Color
  def build_bg_sequence; end
  def build_effects_sequence; end
  def build_fg_sequence; end
  def build_layer(layer); end
  def create_ansi_sequence(fg, bg); end
  def find_from_integer(color_id); end
  def initialize(options = nil); end
end
class PryTheme::ColorTable
  def initialize(color_model); end
  def self.build_color_string(color, fg = nil); end
  def self.t16; end
  def self.t256; end
  def self.t8; end
  def table; end
end
class PryTheme::BasicEditor
  def current_file; end
  def initialize(filename); end
  def output; end
  def output_dashy_header(msg); end
  def reload_theme!; end
  def self.edit(theme_name); end
  def start_editing; end
  def template; end
  def themify(filename); end
end
class PryTheme::Command
end
class PryTheme::Command::PryTheme < Pry::ClassCommand
  def color_model_option_and_other_one?(opts); end
  def color_model_option_only?(opts); end
  def complete(so_far); end
  def convert_color(opts, args); end
  def def_colors(cmd); end
  def def_convert(cmd); end
  def def_current(cmd); end
  def def_edit(cmd); end
  def def_install(cmd); end
  def def_list(cmd); end
  def def_try(cmd); end
  def def_uninstall(cmd); end
  def display_colors(color_model); end
  def install_theme(args); end
  def installed?(theme); end
  def json_body(address); end
  def process; end
  def show_local_list; end
  def show_remote_list; end
  def subcommands(cmd); end
  def without_color_model?(opts); end
  include Pry::Helpers::BaseHelpers
  include Pry::Helpers::CommandHelpers
end
